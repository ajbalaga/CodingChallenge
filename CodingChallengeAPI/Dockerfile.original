# Use a multi-stage build for efficiency and security
# Build stage
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# Copy and restore dependencies
COPY ["CodingChallengeAPI/CodingChallengeAPI.csproj", "CodingChallengeAPI/"]
RUN dotnet restore "./CodingChallengeAPI/CodingChallengeAPI.csproj"

# Copy full application code
COPY . .

# Build the application
WORKDIR "/src/CodingChallengeAPI"
RUN dotnet build "CodingChallengeAPI.csproj" -c Release -o /app/build

# Publish stage
FROM build AS publish
RUN dotnet publish "CodingChallengeAPI.csproj" -c Release -o /app/publish /p:UseAppHost=false

# Runtime stage
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime
WORKDIR /app
EXPOSE 8081

# Optionally, create a dedicated user for running the application
# This is recommended for security best practices
RUN useradd -r -u 1001 -g root app2
USER app2

# Copy published artifacts from the build stage
COPY --from=publish /app/publish .

# Set environment variables, including sensitive information like API keys
# Prefer environment variables for configuration to keep secrets out of the Docker image
ENV API_KEY="Kj3GhPqR7sT5W8zx9Ly7E4nF1aB2cD3"

# Entrypoint for the application
ENTRYPOINT ["dotnet", "CodingChallengeAPI.dll"]
